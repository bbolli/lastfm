#!/bin/bash

# Usage: lastfm [-d] [-u] [-e]
#       -d: dry-run -- just show the differences
#       -u: update -- just update the feed; don't post to tumblr
#       -e: edit -- edit the last tumblr post (the post-id is in file $id)
#
# The default behavior is to add a new post if the <updated> date changed,
# or edit the current post if it didn't.

current=$HOME/public_html/lastfm.atom
new=$current.new
db=$current.dat
out=$current.out
err=$current.err
opt=$1

input=$current; [[ -r $current ]] || input=/dev/null

sorteddiff() {
    diff -ui <(sort $input) <(sort $new)
}

updated() {
    sed -ne '/<updated>/s![ </>updated]!!gp' <$1 | head -n1
}

tumble_check() {
    tumble $1 <$current >$out 2>$err
    [[ -s $err ]] && printf "{'error': '%s'}\n" "$(cat $err)" >>$out
    cat $out
    ! grep -q "'error" $out
}

# get the current charts
charts >$new || exit

# get the updated date and the hash
upd=$(updated $new)
sha=$(sort $new | sha1sum | cut -c-40)

# create the database if it doesn't exist
[[ -r $db ]] || echo >$db

# search this date's post id and hash
set -- $(awk '$1 ~ /'$upd'/ { print $2 " " $3; exit; }' <$db)

# if it wasn't found, create a new post
if [[ -z "$1" ]]; then
    id=
# if the hash is the same, exit
elif [[ $2 = $sha ]]; then
    exit
# if it was found, edit it
else
    id=$1
fi

if [[ "$opt" == -d ]]; then
    # show the difference in dry-run mode
    sorteddiff || true
else
    # update the current file
    mv -f $new $current
    [[ "$opt" == -u ]] && exit
    # edit the current post if we found its id
    if [[ "$id" ]]; then
        ret=$(tumble_check "-e $id") || { echo "$ret"; exit 1; }
        sed -i -e "/ $id / c\\
$upd $id $sha" $db
    else
        ret=$(tumble_check) || { echo "$ret"; exit 1; }
        id=$(echo "$ret" | sed -ne '/post/s/[^0-9]\+//gp')
        echo "$upd $id $sha" >>$db
    fi
fi
